@inject NavigationManager NavigationManager
@implements IDisposable

<RadzenSidebar Responsive="false" @bind-Expanded="@SidebarExpanded" style="position: absolute; z-index: 3">
    <RadzenStack AlignItems="AlignItems.End" class="rz-p-2">
        <RadzenButton Icon="west" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary" Click="@ToggleSidebar" />
    </RadzenStack>
    <RadzenPanelMenu>
        <RadzenPanelMenuItem Text="首頁" Icon="home" Path="" />
        <RadzenPanelMenuItem Text="Radzen 範例" Icon="palette" Path="radzen-sample" />
    </RadzenPanelMenu>
</RadzenSidebar>

@if (SidebarExpanded)
{
    <div @onclick="@ToggleSidebar" class="rz-dialog-mask" style="position: absolute; z-index: 2"></div>
}

@code {
    [Parameter]
    public bool SidebarExpanded { get; set; }

    [Parameter]
    public EventCallback<bool> SidebarExpandedChanged { get; set; }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (SidebarExpanded)
        {
            await ToggleSidebar();
            StateHasChanged();
        }
    }

    private async Task ToggleSidebar()
    {
        SidebarExpanded = false;
        await SidebarExpandedChanged.InvokeAsync(SidebarExpanded);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
